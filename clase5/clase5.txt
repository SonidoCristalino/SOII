
[Lo de la práctica sólo es la parte de C]

Algoritmo del banquero: 
-----------------------

Se comienza con lo siguiente: 

3 Matrices: 
Matriz de Asignación: Las letras representan los recursos y lo demás son los procesos. Nos dice que el proceso 0 tiene
dos instancias de A, de B cero y uno de C. 

[  ][A][B][C]       
[P0][2][0][1]
[P1][1][1][1]
[P2][0][0][1]
[P3][0][0][1]
     3  1  4

Requerimientos: 
[A][B][C]
[0][0][1]
[1][1][0]
[1][0][0]
[2][0][1]

Disponibles: Ns dice cuántos recursos disponibles tenemos
[A][B][C]
[1][0][0]
 1  0  0  

Se hace la cuenta entre Matriz de Asignación y la de disponibles, por lo que: 
    A = 3 (suma de Asignación + Disponibles)
    B = 1 (suma de Asignación + Disponibles)
    C = 4 (suma de Asignación + Disponibles)


Se comienza a iterar por Proceso 
[  ][A][B][C]       
[P0][2][0][1] --> ¿se tiene disponible para terminar el proceso? NO. No se hace nada
[P1][1][1][1] --> ¿Se tiene disponible? Si, sólo el de A
[P2][0][0][1] --> Es el unico que se pude resolver. 
[P3][0][0][1]

Primera iteración: 
[  ][A][B][C]       
[P0][2][0][1]
[P1][1][1][1]
[P2][1][0][1]   --> se le asigna por el matriz de requerimientos
[P3][0][0][1]

[A][B][C]
[0][0][0]

Segunda iteración: 
[  ][A][B][C]       
[P0][2][0][1]
[P1][1][1][1]
[P2][0][0][0] --> terminó
[P3][0][0][1]

[A][B][C]
[1][0][1]

Tercera iteración: 
[  ][A][B][C]       
[P0][2][0][2]
[P1][1][1][1]
[P2][0][0][0] --> terminó
[P3][0][0][1]

[A][B][C]
[1][0][0]

Requerimientos: 
[A][B][C]
[0][0][0]
[1][1][0]
[0][0][0]
[2][0][1]

[  ][A][B][C]       
[P0][0][0][0]
[P1][1][1][1]
[P2][0][0][0] --> terminó
[P3][0][0][1]

[A][B][C]
[3][0][2]

Cuarta Iteración  (cambia el ejercicio para que haya un interbloqueo, cuando no se puede satisfacer ningun requisito
        solicitado) 
    Puede que esté mal algunas cosas, pero se debe escribir cada una de las matrices. 

Requerimientos: 
[A][B][C]
[0][0][0]
[1][1][0]
[0][0][0]
[2][0][1]

Requerimientos
[  ][A][B][C]       
[P0][0][0][0]
[P1][0][0][0]
[P2][0][0][0] --> terminó
[P3][0][0][1]

Disponibles
[A][B][C]
[2][0][2]

Requerimientos
[A][B][C]
[0][0][0]
[1][1][0]
[0][0][0]
[0][0][0]

Asignacion
[  ][A][B][C]       
[P0][0][0][0]
[P1][0][0][0]
[P2][0][0][0] 
[P3][2][1][2]

Disponibles
[A][B][C]
[4][1][4]


Problema del algoritmo: [en la carpeta d Redes II]

3 problemas: 
    * Es enorme la cantidad de procesamiento que debe hacer para comparar. 
    * Cientos de procesos con ciento de recursos, por lo qeu la lista se vuelve inmensa. 
    * El algoritmo debería de ser recursivo, por lo que se vuelve más pesado aún. 

    Es imposible de implementarlo por el tiempo de cómputo que consume. 
    Por cada bifurcación, puede realizar un camino distintos por lo que hay que compararlo. 


Problemas del iglu: Se puede tomar tanto el primero o el último 
